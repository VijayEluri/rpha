/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.kirunews.rpha.struts.action;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.HashMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.kirunews.rpha.model.SearchBook;
import com.kirunews.rpha.struts.form.EditBookForm;
import com.kirunews.rpha.util.Configuration;
import com.kirunews.rpha.util.Logging;
import com.kirunews.rpha.util.XsltTransformator;

/** 
 * MyEclipse Struts
 * Creation date: 12-28-2007
 * 
 * XDoclet definition:
 * @struts.action path="/editBook" name="editBookForm" input="/form/editBook.jsp" scope="request" validate="true"
 */
public class EditBookAction extends Action {
	private static Logger logger = Logging.getLogger();
	private String contextPath;

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm editBookForm,
			HttpServletRequest request, HttpServletResponse response) {
		EditBookForm form = (EditBookForm) editBookForm;
		String[] fields = {"id"};
		String id = form.getId();
		String[] values = {id};
		logger.info("edit book: " + id);
		String xsltDir = Configuration.params.getConfigDir() + "/xslt/";
		contextPath = request.getContextPath();

		try {
			SearchBook searchData = new SearchBook();
			String xml = searchData.search(fields, values, false);
			form.setJs(transform(xml, xsltDir + "/xml2js.xsl"));
		} catch(FileNotFoundException e) {
			form.setError(e.getMessage());
		} catch(IOException e) {
			form.setError(e.getMessage());
		} catch(TransformerConfigurationException e) {
			form.setError(e.getMessage());
		} catch(TransformerException e) {
			form.setError(e.getMessage());
		}
		
		return mapping.getInputForward();
	}

	private String transform(String xmlSource, String xsltFileName) 
			throws FileNotFoundException, TransformerConfigurationException,
			TransformerException {
		String fileNameToShow = xsltFileName.substring(xsltFileName.lastIndexOf("/")+1);
		try {
			XsltTransformator t = new XsltTransformator();
			HashMap<String, String> params = new HashMap<String, String>();
			params.put("varName", "analyticum");
			t.setParams(params);
			String output = t.transform(xmlSource, xsltFileName);
			return output.replaceAll("BASE_PATH", contextPath);
		} catch (FileNotFoundException e) {
			throw new FileNotFoundException(fileNameToShow + 
				" [File not found error] " + e.getMessage());
		} catch (TransformerConfigurationException e) {
			throw new TransformerConfigurationException(fileNameToShow + 
				" [Transformer configuration error] " + e.getMessageAndLocation());
		} catch (TransformerException e) {
			throw new TransformerException(fileNameToShow + 
				" [Transformer error] " + e.getMessageAndLocation());
		}
	}
}