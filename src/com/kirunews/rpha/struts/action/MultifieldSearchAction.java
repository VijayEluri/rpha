/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.kirunews.rpha.struts.action;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;

import org.apache.log4j.Logger;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.queryParser.ParseException;
import org.apache.lucene.queryParser.QueryParser;
import org.apache.lucene.queryParser.QueryParser.Operator;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.Sort;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.kirunews.rpha.model.MegarepQueryDictionary;
import com.kirunews.rpha.model.PoemSearcher;
import com.kirunews.rpha.model.QueryDictionary;
import com.kirunews.rpha.model.RPHACodeQueryDictionary;
import com.kirunews.rpha.model.RPHAQueryTranslator;
import com.kirunews.rpha.model.SearchBook;
import com.kirunews.rpha.model.fixedvalues.AcrValues;
import com.kirunews.rpha.model.fixedvalues.ChansValues;
import com.kirunews.rpha.model.fixedvalues.ColoValues;
import com.kirunews.rpha.model.fixedvalues.IntValues;
import com.kirunews.rpha.model.fixedvalues.PreValues;
import com.kirunews.rpha.model.fixedvalues.RefrenValues;
import com.kirunews.rpha.model.fixedvalues.RelseValues;
import com.kirunews.rpha.model.fixedvalues.SigneValues;
import com.kirunews.rpha.model.fixedvalues.TypmeValues;
import com.kirunews.rpha.struts.form.Item;
import com.kirunews.rpha.struts.form.MultifieldSearchForm;
import com.kirunews.rpha.util.Logging;
import com.kirunews.rpha.util.XsltTransformator;

/**
 * MyEclipse Struts Creation date: 07-18-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/multifieldSearch" name="multifieldSearchForm"
 *                input="/form/multifieldSearch.jsp" scope="request"
 *                validate="true"
 */
public class MultifieldSearchAction extends Action {
	/*
	 * Generated Methods
	 */
	private static Logger logger = Logging.getLogger();
	private SearchBook bookSearcher;
	private Map<String, String> bookTitles = new HashMap<String, String>();

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		String xsltDir = servlet.getServletContext().getRealPath("/xslt");
		
		MultifieldSearchForm multifieldSearchForm = (MultifieldSearchForm) form;
		multifieldSearchForm.setAcrValues(AcrValues.getAll());
		multifieldSearchForm.setChansValues(ChansValues.getAll());
		multifieldSearchForm.setColoValues(ColoValues.getAll());
		multifieldSearchForm.setTypmeValues(TypmeValues.getAll());
		multifieldSearchForm.setSigneValues(SigneValues.getAll());
		multifieldSearchForm.setIntValues(IntValues.getAll());
		multifieldSearchForm.setPreValues(PreValues.getAll());
		multifieldSearchForm.setRefrenValues(RefrenValues.getAll());
		multifieldSearchForm.setRelseValues(RelseValues.getAll());
		
		String queryString = request.getQueryString();
		if(queryString != null) {
			queryString = queryString.replaceAll("&offset=.*?&", "&");
			queryString = queryString.replaceAll("&offset=.*?$", "");
		}
		multifieldSearchForm.setQueryString(queryString);
		Enumeration<?> params = request.getParameterNames();
		Boolean hasParam = false;
		while(params.hasMoreElements()) {
			String p = (String) params.nextElement();
			if(p.equals("ordering_type"))
				continue;
			String[] vals = request.getParameterValues(p);
			if(vals != null && vals[0] != null && !vals[0].trim().equals("")) {
				hasParam = true;
				multifieldSearchForm.setFormState(p + ": " + vals[0]);
				break;
			}
		}
		
		if(!hasParam) {
			multifieldSearchForm.setFormState("first");
		} else {
			multifieldSearchForm.setFormState("second");
			//RPHAQueryTranslator translator = new RPHAQueryTranslator(new RPHACodeQueryDictionary());
			String rawQuery = createRawQuery(multifieldSearchForm, new RPHACodeQueryDictionary());
			multifieldSearchForm.setFormState("query: " + rawQuery);
			QueryParser parser = new QueryParser("v1", new StandardAnalyzer());
			parser.setDefaultOperator(Operator.AND);
			int offset = (int)multifieldSearchForm.getOffset(); //form.getStartIndex();
			int limit  = 20; //form.getCount();
			try {
				Query rphaQuery = parser.parse(rawQuery + " AND (v91:0 OR v91:5)");
				PoemSearcher searcher = new PoemSearcher();
				
				Map<String, Object> results = searcher.searchByQuery(
						rphaQuery, false, limit, offset, new Sort("id"));
				List<Item> items = (List<Item>)results.get("items");
				int totalResults = Integer.parseInt(results.get("totalResults").toString());
				StringBuffer sb = new StringBuffer();
				int k = offset;
				for(Item item : items) {
					sb.append("<h3>" + k++ + ".) ");
					if(item.getDoctype().equals("0")) {
						sb.append("<a href='/rpha/id/" + item.getTitle() 
							+ "'>RPHA " + item.getTitle() + "</a></h3>");
					}
					else if(item.getDoctype().equals("5")) {
						String bookTitle = getBookTitle(item.getBookId());
						if(bookTitle == "") {
							bookTitle = item.getBookId();
						}
						sb.append("<a href='/rpha/id/" + item.getSyntId() 
								+ "'>RPHA " + item.getSyntId() 
								+ " (" + bookTitle + ")</a></h3>");
					}
					sb.append(transform(item.getDescription(), 
						xsltDir + "/resultList.xsl", request.getContextPath())
					);
				}
				multifieldSearchForm.setResultList(sb.toString());
				multifieldSearchForm.setFormState("keresőkérdés: " + rawQuery 
						+ ", találatok száma: " + totalResults
						+ ", megjelenített rekordok: " + offset + "-" 
						+ (totalResults < (offset+limit) ? totalResults : (offset+limit)-1)
						+ "."
				);
				
				StringBuffer links = new StringBuffer();
				if(totalResults > limit) {
					int j = 1;
					for(int i=1; i<offset; i = ((++j-1)*limit)+1){
						if(links.length() > 0) links.append(" &nbsp;");
						links.append("<a href=\"?" + queryString 
								+ "&offset=" + i + "\">" + j + "</a>");
					}
					if(links.length() > 0) links.append(" &nbsp;");
					links.append(j++);
					for(int i=((j-1)*limit)+1; i<=totalResults; i = ((++j-1)*limit)+1){
						if(links.length() > 0) links.append(" &nbsp;");
						links.append("<a href=\"?" + queryString 
								+ "&offset=" + i + "\">" + j + "</a>");
					}
				}
				multifieldSearchForm.setLinks(links.toString());
			

			}
			catch(Exception e) {
				e.printStackTrace();
			}
		}
		return mapping.getInputForward(); //findForward("search-rpha5");
	}

	private String createRawQuery(MultifieldSearchForm form, QueryDictionary dic) {
		List<String> list = new ArrayList<String>();
		addField("rpha", form.getRpha(), list, dic);
		addField("chans", form.getChans(), list, dic);
		addField("signe", form.getSigne(), list, dic);
		addField("int", form.getInte(), list, dic);
		addField("lon", form.getLon(), list, dic);
		addField("pre", form.getPre(), list, dic);
		addField("refren", form.getRefren(), list, dic);
		addField("metr", form.getMetr(), list, dic);
		addField(form.getRelse1Type(), form.getRelse1(), list, dic);
		addField(form.getRelse2Type(), form.getRelse2(), list, dic);
		addField(form.getRelse3Type(), form.getRelse3(), list, dic);
		
		addField("aut1", form.getAut1(), list, dic);
		addField("aut2", form.getAut2(), list, dic);
		addField("inc", form.getInc(), list, dic);
		addField("titre", form.getTitre(), list, dic);
		addField("acr", form.getAcr(), list, dic);
		addField("acrost", form.getAcrost(), list, dic);
		addField("colo", form.getColo(), list, dic);
		addField("doncolo", form.getDoncolo(), list, dic);
		addField("rime", form.getRime(), list, dic);
		addField("syll", form.getSyll(), list, dic);
		addField("typme", form.getTypme(), list, dic);
		addField("genre", form.getGenre1(), list, dic);
		addField("genre", form.getGenre2(), list, dic);
		addField("an", form.getAn(), list, dic);
		addField("comment", form.getComment(), list, dic);
		addField("inc", form.getInc(), list, dic);

		if (form.getPrec() != null && form.getPrec().booleanValue()) {
			list.add(dic.toRpha("prec") + ":" + "1");
		}

		StringBuffer sb = new StringBuffer();
		for (String item : list) {
			if (sb.length() > 0) {
				sb.append(" AND ");
			}
			sb.append(item);
		}
		return sb.toString();
	}

	private void addField(String fieldName, String value, List<String> list,
			QueryDictionary dic) {
		if (fieldName != null && value != null && value.trim().length() > 0) {
			list.add(dic.toRpha(fieldName) + ":" + value);
		}
	}

	private String transform(String xmlSource, String xsltFileName,
			String contextPath) {
		// logger.info(xmlSource);
		String fileNameToShow = xsltFileName.substring(xsltFileName
				.lastIndexOf("/") + 1);
		try {
			XsltTransformator t = new XsltTransformator();
			String output = t.transform(xmlSource, xsltFileName);
			return output.replaceAll("BASE_PATH", contextPath);
		} catch (FileNotFoundException e) {
			logger.error(fileNameToShow + " [File not found error] "
					+ e.getMessage());
			// searchForm.setError(fileNameToShow + " [File not found error] " +
			// e.getMessage());
		} catch (TransformerConfigurationException e) {
			logger.error(fileNameToShow + " [Transformer configuration error] "
					+ e.getMessageAndLocation());
		} catch (TransformerException e) {
			// logger.error(xmlSource);
			logger.error(fileNameToShow + " [Transformer error] "
					+ e.getMessageAndLocation() + xmlSource);
		}
		return "";
	}
	
	private String getBookTitle(String id) {
		if(bookTitles.containsKey(id)) {
			return bookTitles.get(id);
		}
		try {
			if(bookSearcher == null) {
				bookSearcher = new SearchBook();
			}
			ArrayList<Document> books = bookSearcher.execute("id", id);
			String title = books.get(0).get("v122") + " - " 
				+ books.get(0).get("v101") + " " + books.get(0).get("v111");
			bookTitles.put(id, title);
			return title;
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return "";
	}

}