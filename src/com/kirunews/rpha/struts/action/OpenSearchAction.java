/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.kirunews.rpha.struts.action;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;

import org.apache.log4j.Logger;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.queryParser.ParseException;
import org.apache.lucene.queryParser.QueryParser;
import org.apache.lucene.queryParser.QueryParser.Operator;
import org.apache.lucene.search.Query;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.kirunews.rpha.model.MegarepQueryDictionary;
import com.kirunews.rpha.model.RPHAQueryTranslator;
import com.kirunews.rpha.model.PoemSearcher;
import com.kirunews.rpha.struts.form.Item;
import com.kirunews.rpha.struts.form.OpenSearchForm;
import com.kirunews.rpha.util.Configuration;
import com.kirunews.rpha.util.Logging;
import com.kirunews.rpha.util.XsltTransformator;

/** 
 * MyEclipse Struts
 * Creation date: 04-28-2009
 * 
 * XDoclet definition:
 * @struts.action path="/openSearch" name="openSearchForm" input="/form/openSearch.jsp" scope="request" validate="true"
 */
public class OpenSearchAction extends Action {

	private static Logger logger = Logging.getLogger();
	private String contextPath;

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm _form,
			HttpServletRequest request, HttpServletResponse response) {
		
		System.setProperty("javax.xml.transform.TransformerFactory",
		"net.sf.saxon.TransformerFactoryImpl");
		String xsltDir = Configuration.params.getConfigDir() + "/xslt/";
		contextPath = request.getContextPath();
		StringBuilder url = new StringBuilder();
		logger.info("addr: " + request.getRemoteAddr());
		logger.info("addr: " + request.getRequestURI());
		url.append("http://").append(request.getServerName());
		if (request.getServerPort() != 80) {
			url.append(":").append(request.getServerPort());
		}
		url.append(contextPath);
		url.append("/id/");
		logger.info("url: " + url.toString());

		OpenSearchForm form = (OpenSearchForm) _form;
		
		QueryParser parser = new QueryParser("v1", new StandardAnalyzer());
		parser.setDefaultOperator(Operator.AND);
		RPHAQueryTranslator translator = new RPHAQueryTranslator(new MegarepQueryDictionary());
		int offset = form.getStartIndex();
		int limit  = form.getCount();
		try {
			Query rphaQuery = translator.translateQuery(parser.parse(form.getSearchTerms()));
			PoemSearcher searchData = new PoemSearcher();
			Map<String, Object> results = searchData.searchByQuery(
					rphaQuery, false, limit, offset);
			form.setTotalResults((Integer)results.get("totalResults"));
			@SuppressWarnings("unchecked")
			List<Item> items = (List<Item>)results.get("items");
			logger.info(items.size() + " records found");
			for(Item item : items) {
				form.addItem(new Item(
					"RPHA " + item.getTitle(), 
					url.toString() + item.getTitle(), // "http://rpha.elte.hu/rpha/id/"
					transform(item.getDescription(), xsltDir + "/rpha2megarep.xsl")
				));
			}
		} catch (ParseException e) {
			logger.error(e.getMessage());
			//form.setError("Invalid query");
		} catch (FileNotFoundException e) {
			logger.error(e.getMessage());
			//form.setError("Invalid index place");
		} catch (IOException e) {
			logger.error(e.getMessage());
			//form.setError("Invalid index");
		}

		form.setTitle("RPHA results");
		form.setDescription("RPHA results");
		form.setLink("http://tesuji.eu/rpha/openSearch.do?" + form.getSearchTerms());
		return mapping.getInputForward();
	}
	
	private String transform(String xmlSource, String xsltFileName) {
		//logger.info(xmlSource);
		String fileNameToShow = xsltFileName.substring(xsltFileName.lastIndexOf("/")+1);
		try {
			XsltTransformator t = new XsltTransformator();
			String output = t.transform(xmlSource, xsltFileName);
			return output.replaceAll("BASE_PATH", contextPath);
		} catch (FileNotFoundException e) {
			logger.error(fileNameToShow + " [File not found error] " + e.getMessage());
			//searchForm.setError(fileNameToShow + " [File not found error] " + e.getMessage());
		} catch (TransformerConfigurationException e) {
			logger.error(fileNameToShow + " [Transformer configuration error] " + e.getMessageAndLocation());
		} catch (TransformerException e) {
			//logger.error(xmlSource);
			logger.error(fileNameToShow + " [Transformer error] " + e.getMessageAndLocation() + xmlSource);
		}
		return "";
	}

}